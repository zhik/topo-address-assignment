{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "addressSearch.svelte",
    "addressTable.svelte",
    "bblSearch.svelte",
    "mapSearch.svelte",
    "index.svelte",
    "lots.svelte",
    "notFound.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Router, { link } from 'svelte-spa-router'\n  import { routes } from './routes'\n  import 'bulma/css/bulma.css'\n</script>\n\n<div class=\"app\">\n  <nav>\n    <ul>\n      <li>\n        <a href=\"/\" use:link>Home</a>\n      </li>\n    </ul>\n  </nav>\n  <div class=\"content\">\n    <Router {routes}></Router>\n  </div>\n</div>\n\n<style>\n  .app {\n    display: flex;\n    flex-wrap: wrap;\n    font-family: 'Source Sans Pro', sans-serif;\n  }\n  :global(.is-1, .is-2, .is-3, .is-4, .is-5, .is-6) {\n    font-family: 'Merriweather', serif;\n  }\n  nav {\n    margin: 20px;\n    display: flex;\n    flex-direction: column;\n    flex: 1 0;\n    position: relative;\n  }\n  .content {\n    margin: 20px;\n    flex: 999 1 675px;\n    min-height: 675px;\n  }\n\n  @media all and (max-width: 675px) {\n    .content,\n    nav {\n      margin: 10px;\n    }\n  }\n</style>\n",
    "<script>\n  let value = \"\";\n  let searchAddrs = [];\n  let error = false;\n  export let view;\n  export let plutoLayer;\n  let timer\n\n  function debounce(v) {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      _search();\n    }, 300);\n  }\n\n  function _set(addr) {\n    //set value to clicked addr , then clear searchAddrs\n    if (addr && typeof addr !== \"object\") {\n      value = addr;\n    } else {\n      error = true;\n      return 0;\n    }\n    searchAddrs = [];\n    fetch(`https://geosearch.planninglabs.nyc/v1/search?text=${value}&size=5`)\n      .then((response) => response.json())\n      .then((response) => {\n        //use the first address\n        if (response.features.length > 0) {\n          const coords = response.features[0].geometry.coordinates;\n          view.goTo({\n            target: coords,\n            zoom: 17,\n          });\n\n          //search plutoLayer\n          const point = {\n            x: coords[0],\n            y: coords[1],\n            spatialReference: {\n              wkid: 4326,\n            },\n            type: \"point\",\n          };\n          console.log(point);\n          plutoLayer\n            .queryFeatures({\n              //query object\n              geometry: point,\n              spatialRelationship: \"intersects\",\n              returnGeometry: false,\n              outFields: [\"BBL\"],\n              distance: 10,\n              units: \"feet\",\n            })\n            .then((featureSet) => {\n              console.log(featureSet.features);\n              // open popup of query result\n              view.popup.open({\n                location: point,\n                features: featureSet.features,\n              });\n            });\n        } else {\n          //throw error\n          error = true;\n        }\n      });\n  }\n\n  function _search() {\n    if (value.length > 1) {\n      fetch(`https://geosearch.planninglabs.nyc/v1/autocomplete?text=${value}`)\n        .then((response) => response.json())\n        .then(\n          (response) =>\n            (searchAddrs = response.features\n              .map((feature) =>\n                feature.properties.label.replace(\", New York, NY, USA\", \"\")\n              )\n              .slice(0, 5))\n        );\n    } else {\n      searchAddrs = [];\n    }\n    return true;\n  }\n</script>\n\n<form on:submit|preventDefault={_set}>\n  <div class=\"field is-horizontal\">\n    <div class=\"field-label is-normal\">\n      <label class=\"label\" for=\"address\">Search by Address</label>\n    </div>\n    <div class=\"field-body\">\n      <div class=\"field\">\n        <div class=\"control is-expanded\">\n          <input\n            id=\"address\"\n            placeholder=\"1 Centre Street\"\n            type=\"text\"\n            name=\"address\"\n            bind:value\n            autocomplete=\"off\"\n            on:keyup={({ target: { value } }) => {\n              debounce(value)\n            }}\n            class={!error\n              ? \"input is-fullwidth\"\n              : \"input is-fullwidth is-danger\"}\n          />\n        </div>\n      </div>\n      <button type=\"submit\" class=\"button\">Search</button>\n    </div>\n  </div>\n  {#if error}\n    <p class=\"help is-danger\">No addresses found</p>\n  {/if}\n\n  <ul>\n    {#each searchAddrs as addr}\n      <li on:click={() => _set(addr)}>{addr}</li>\n    {/each}\n  </ul>\n  <p class=\"help\">If your address can not be found, try a nearby address.</p>\n</form>\n\n<style>\n  form {\n    margin-bottom: 1rem;\n  }\n  #address {\n    width: 100%;\n    padding: 5px 15px;\n    box-sizing: border-box;\n    margin-bottom: 5px;\n  }\n  input[type=\"submit\"] {\n    background-color: #6a6a6a;\n    border: none;\n    color: white;\n    padding: 5px 10px;\n    text-decoration: none;\n    cursor: pointer;\n  }\n  ul {\n    padding-left: 10px;\n    color: rgb(61, 61, 61);\n    margin: 0px !important;\n  }\n  li {\n    margin-left: 5px;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n\n  const dispatch = createEventDispatcher()\n  export let addresses\n\n  //sort by street then house number\n  $: sortedAddresses = addresses.sort((a, b) =>\n    a.street.toLowerCase() !== b.street.toLowerCase()\n      ? a.street.toLowerCase().localeCompare(b.street.toLowerCase())\n      : sortByNumber(a.houseNum, b.houseNum)\n  )\n\n  function sortByNumber(a, b) {\n    const a_num = a.match(/\\d+/)[0]\n    const b_num = b.match(/\\d+/)[0]\n    return a_num !== b_num\n      ? a_num - b_num\n      : a.toLowerCase().localeCompare(b.toLowerCase())\n  }\n\n  function unixToUTC(seconds) {\n    const date = new Date(seconds)\n    const localeDate = date.toLocaleDateString('en-US')\n    const localeTime = date.toLocaleTimeString('en-US')\n    return `<abbr title=\"${localeDate} ${localeTime}\">${localeDate}</abbr>`\n  }\n\n  function getFiles(files) {\n    if (files.length > 0) {\n      //35?w=400\n      return `${files.length}`\n    }\n    return ''\n  }\n\n  function highlightAddress(feature) {\n    dispatch('message', {\n      feature\n    })\n  }\n</script>\n\n<div class=\"table-overflow\">\n  <table class=\"table is-hoverable is-fullwidth is-bordered\">\n    <thead>\n      <th><abbr title=\"House number\">House #</abbr></th>\n      <th>Street</th>\n      <th>Type</th>\n      <th>Last Edit Date</th>\n      <th>Files</th>\n    </thead>\n    <tbody>\n      {#each sortedAddresses as address (address.id)}\n      <tr on:click=\"{highlightAddress(address.feature)}\">\n        <td>{address.houseNum}</td>\n        <td>{address.street}</td>\n        <td>{address.type}</td>\n        <td>{@html unixToUTC(address.lastEdit)}</td>\n        <td>{@html getFiles(address.files)}</td>\n      </tr>\n      {/each}\n    </tbody>\n  </table>\n</div>\n\n<style>\n  .table-overflow {\n    overflow-x: auto;\n    max-width: 90vw;\n  }\n</style>\n",
    "<script>\n  let block = \"\";\n  let lot = \"\";\n  let error = \"\";\n\n  export let view;\n  export let plutoLayer;\n\n  const headers = new Headers();\n  headers.append('Ocp-Apim-Subscription-Key','8ef9b00a1d6c4a97b17a6c4828cfc2eb')\n\n  function _set(addr) {\n    fetch(\n      `https://api.nyc.gov/geo/geoclient/v1/bbl.json?borough=manhattan&block=${block}&lot=${lot}`\n    , {headers})\n      .then((response) => response.json())\n      .then((response) => {\n        if (\"latitudeInternalLabel\" in response.bbl) {\n          const { latitudeInternalLabel, longitudeInternalLabel } =\n            response.bbl;\n          const coords = [longitudeInternalLabel, latitudeInternalLabel];\n          view.goTo({\n            target: coords,\n            zoom: 17,\n          });\n\n          //search plutoLayer\n          const point = {\n            x: coords[0],\n            y: coords[1],\n            spatialReference: {\n              wkid: 4326,\n            },\n            type: \"point\",\n          };\n          console.log(point);\n          plutoLayer\n            .queryFeatures({\n              //query object\n              geometry: point,\n              spatialRelationship: \"intersects\",\n              returnGeometry: false,\n              outFields: [\"BBL\"],\n              distance: 10,\n              units: \"feet\",\n            })\n            .then((featureSet) => {\n              console.log(featureSet.features);\n              // open popup of query result\n              view.popup.open({\n                location: point,\n                features: featureSet.features\n              });\n            });\n        } else {\n          //throw error\n          error = 'bbl-error';\n        }\n      }).catch(e => error = 'api-down')\n  }\n</script>\n\n<form on:submit|preventDefault={_set}>\n  <div class=\"field is-horizontal\">\n    <div class=\"field-label is-normal\">\n      <label class=\"label\">Search by BBL</label>\n    </div>\n    <div class=\"field-body\">\n      <div class=\"field\">\n        <div class=\"control\">\n          <input\n            id=\"block\"\n            placeholder=\"Block\"\n            type=\"text\"\n            pattern=\"\\d*\"\n            name=\"block\"\n            bind:value={block}\n            on:keyup={() => (error = false)}\n            autocomplete=\"off\"\n            class={!error\n              ? \"input is-fullwidth\"\n              : \"input is-fullwidth is-danger\"}\n            maxlength=\"5\"\n          />\n        </div>\n      </div>\n      <div class=\"field\">\n        <div class=\"control\">\n          <input\n            id=\"lot\"\n            placeholder=\"Lot\"\n            type=\"text\"\n            pattern=\"\\d*\"\n            name=\"lot\"\n            bind:value={lot}\n            on:keyup={() => (error = \"\")}\n            autocomplete=\"off\"\n            class={!error\n              ? \"input is-fullwidth\"\n              : \"input is-fullwidth is-danger\"}\n            maxlength=\"4\"\n          />\n        </div>\n      </div>\n      <button type=\"submit\" class=\"button\">Search</button>\n    </div>\n  </div>\n  {#if error === 'bbl-error'}\n    <p class=\"help is-danger\">Block and/or Lot is invalid</p>\n  {/if}\n  {#if error === 'api-down'}\n  <p class=\"help is-danger\">BBL search database is down</p>\n  {/if}\n</form>\n\n<style>\n  form {\n    margin-bottom: 1rem;\n  }\n  input[type=\"submit\"] {\n    background-color: #6a6a6a;\n    border: none;\n    color: white;\n    padding: 5px 10px;\n    text-decoration: none;\n    cursor: pointer;\n  }\n</style>\n",
    "<script>\n  import { onMount } from 'svelte'\n  export let view\n  export let plutoLayer\n  let container\n  let map\n\n  onMount(() => {\n    require([\n      'esri/Map',\n      'esri/views/MapView',\n      'esri/layers/FeatureLayer',\n      'esri/widgets/Legend'\n    ], (Map, MapView, FeatureLayer, Legend) => {\n      map = new Map({\n        basemap: 'gray-vector'\n      })\n\n      view = new MapView({\n        container,\n        map,\n        center: [-74.0034, 40.7128],\n        zoom: 16\n      })\n\n      function createFillSymbol(value, color) {\n        return {\n          value: value,\n          symbol: {\n            color: color,\n            type: 'simple-fill',\n            style: 'solid',\n            outline: {\n              style: 'none'\n            }\n          },\n          label: value\n        }\n      }\n\n      const typeRenderer = {\n        type: 'unique-value',\n        field: 'TYPE',\n        defaultSymbol: {\n          type: 'simple-fill',\n          color: '#aaaaaa',\n          style: 'solid',\n          outline: {\n            style: 'none'\n          }\n        },\n        uniqueValueInfos: [\n          createFillSymbol('New/Permanent', '#ed5151'),\n          createFillSymbol('Tentative', '#149ece'),\n          createFillSymbol('No Topo', '#ffde3e')\n        ]\n      }\n\n      plutoLayer = new FeatureLayer({\n        url:\n          'https://services9.arcgis.com/E91gVsRO3nuXX9et/ArcGIS/rest/services/mn_topo_pluto_public/FeatureServer/0',\n        renderer: typeRenderer,\n        opacity: 0.4,\n        outFields: ['BBL', 'Type'],\n        popupTemplate: {\n          title: 'Lot Information',\n          content: [\n            {\n              type: 'text',\n              text:\n                '<strong><a href=\"#/lots/{BBL}\">Click here to view more details</a></strong>'\n            },\n            {\n              type: 'fields',\n              fieldInfos: [\n                {\n                  fieldName: 'BBL',\n                  label: 'Boro-Block-Lot',\n                  stringFieldOption: 'text-box'\n                },\n                {\n                  fieldName: 'Type',\n                  label: 'Type/Status'\n                },\n                { fieldName: 'Comments', label: 'Comments' }\n              ]\n            },\n            { type: 'attachments' }\n          ]\n        }\n      })\n\n      //add legend\n      const legend = new Legend({\n        view,\n        layerInfos: [\n          {\n            layer: plutoLayer,\n            title: 'Parcels/ Lots'\n          }\n        ]\n      })\n\n      view.ui.add(legend, 'bottom-right')\n\n      map.add(plutoLayer, 0)\n    })\n  })\n</script>\n\n<div id=\"map\" bind:this=\"{container}\"></div>\n\n<style>\n  :global(.esri-legend) {\n    max-height: 150px !important;\n  }\n\n  :global(.esri-feature__text a) {\n    background-color: #ffcece;\n  }\n\n  #map {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n",
    "<script>\n  import MapSearch from '../components/mapSearch.svelte'\n  import AddressSearch from '../components/addressSearch.svelte'\n  import BBLSearch from '../components/bblSearch.svelte'\n\n  let view\n  let plutoLayer\n</script>\n\n<main>\n  <h3 class=\"title is-3\">Manhattan Topographical Bureau</h3>\n  <h6 class=\"subtitle is-6\">Address assignment statuses (beta)</h6>\n\n  <div id=\"map\">\n    <div class=\"has-background-light info\">\n      <p class=\"is-6\">\n        Search by BBL, then click on a lot to view more details in\n        the popup.\n      </p>\n    </div>\n    <AddressSearch {view} {plutoLayer}></AddressSearch>\n    <hr />\n    <BBLSearch {view} {plutoLayer}></BBLSearch>\n    <p>\n      Note: We are current in the process of initializing the database, some\n      addresses and documents might be missing.\n    </p>\n    <MapSearch bind:view=\"{view}\" bind:plutoLayer=\"{plutoLayer}\"></MapSearch>\n  </div>\n</main>\n\n<style>\n  #map {\n    max-width: 1000px;\n    height: 600px;\n  }\n  .info {\n    padding: 1rem 0.5rem;\n    margin-bottom: 1rem;\n  }\n</style>\n",
    "<script>\n  import { onMount } from 'svelte'\n  import { link } from 'svelte-spa-router'\n  import AddressTable from '../components/addressTable.svelte'\n  export let params = {}\n  let container\n  let addresses\n  let view\n  let addressLayer\n  let highlightSelect\n  let lotDetails = {\n    files: [],\n    comments: '',\n    type: ''\n  }\n  //remove all commas\n  $: bbl = parseInt(params.bbl.split(',').join(''))\n\n  //generate bbl\n\n  $: bbl_break = {\n    boro: bbl.toString()[0],\n    block: bbl\n      .toString()\n      .slice(1, 6)\n      .replace(/^0+/g, ''),\n    lot: bbl\n      .toString()\n      .slice(6)\n      .replace(/^0+/g, '')\n  }\n\n  onMount(() => {\n    require([\n      'esri/Map',\n      'esri/views/MapView',\n      'esri/layers/FeatureLayer',\n      'esri/widgets/Legend'\n    ], (Map, MapView, FeatureLayer, Legend) => {\n      const map = new Map({\n        basemap: 'gray-vector'\n      })\n\n      view = new MapView({\n        container,\n        map,\n        center: [-74.0034, 40.7128],\n        zoom: 16\n      })\n\n      function createFillSymbol(value, color) {\n        return {\n          value: value,\n          symbol: {\n            color: color,\n            type: 'simple-fill',\n            style: 'solid',\n            outline: {\n              style: 'none'\n            }\n          },\n          label: value\n        }\n      }\n\n      const typeRenderer = {\n        type: 'unique-value',\n        field: 'BBL',\n        defaultSymbol: {\n          type: 'simple-fill',\n          color: '#aaaaaa',\n          style: 'solid',\n          outline: {\n            style: 'none'\n          }\n        },\n        uniqueValueInfos: [createFillSymbol(bbl, '#ed5151')]\n      }\n\n      const plutoLayer = new FeatureLayer({\n        url:\n          'https://services9.arcgis.com/E91gVsRO3nuXX9et/ArcGIS/rest/services/mn_topo_pluto_public/FeatureServer/0',\n        renderer: typeRenderer,\n        opacity: 0.4,\n        outFields: ['BBL', 'Type'],\n        definitionExpression: `BBL = ${bbl}`\n      })\n\n      //add to map\n      map.add(plutoLayer, 0)\n\n      //zoom to plutoLayer extent\n      plutoLayer\n        .when(() => plutoLayer.queryExtent())\n        .then(response => view.goTo(response.extent))\n\n      //query for attachements on lot\n      plutoLayer\n        .when(() => plutoLayer.queryObjectIds())\n        .then(objectIds => plutoLayer.queryAttachments({ objectIds }))\n        .then(attachements => {\n          lotDetails.files = Object.keys(attachements).reduce(\n            (all, key) => [...all, ...attachements[key]],\n            []\n          )\n        })\n\n      //query for addresses\n      plutoLayer.queryFeatures().then(results => {\n        const geometry = results.features[0].geometry\n        const { attributes } = results.features[0].toJSON()\n        lotDetails.comments = attributes['Comments']\n        lotDetails.type = attributes['Type']\n        //add address layer\n        addressLayer = new FeatureLayer({\n          url:\n            'https://services9.arcgis.com/E91gVsRO3nuXX9et/ArcGIS/rest/services/mn_topo_addresses_public/FeatureServer/0',\n          popupTemplate: {\n            title: '{House_Num} {Street}',\n            content: [\n              {\n                type: 'fields',\n                fieldInfos: [\n                  {\n                    fieldName: 'House_Num',\n                    label: 'House Number'\n                  },\n                  {\n                    fieldName: 'Street',\n                    label: 'Street'\n                  },\n                  {\n                    fieldName: 'SAF_Type',\n                    label: 'SAF Type'\n                  },\n                  {\n                    fieldName: 'Primary_',\n                    label: 'Is Primary'\n                  },\n                  {\n                    fieldName: 'Posted',\n                    label: 'Is Posted'\n                  },\n                  {\n                    fieldName: 'Comments',\n                    label: 'Comments'\n                  }\n                ]\n              },\n              { type: 'attachments' }\n            ]\n          }\n        })\n\n        //add legend\n        const legend = new Legend({\n          view,\n          layerInfos: [\n            {\n              layer: addressLayer,\n              title: 'Addresses'\n            },\n            {\n              layer: plutoLayer,\n              title: 'Parcels/ Lots'\n            }\n          ]\n        })\n\n        view.ui.add(legend, 'bottom-right')\n\n        map.add(addressLayer, 1)\n\n        //filter for address that is within 10 feet of buffer of bbl\n        view\n          .whenLayerView(addressLayer)\n          .then(layerView => {\n            layerView.filter = {\n              geometry,\n              spatialRelationship: 'contains',\n              distance: 5,\n              units: 'feet'\n            }\n          })\n          .then(() => {\n            const query = addressLayer.createQuery()\n            query.geometry = geometry\n            query.spatialRelationship = 'contains'\n            query.distance = 5\n            query.units = 'feet'\n            return queryFeaturesItem(addressLayer, query)\n          })\n          .then(features => {\n            addresses = features\n            //reset view\n            view\n              .whenLayerView(addressLayer)\n              .then(layerView => (layerView.filter = { where: '1=1' }))\n          })\n      })\n    })\n  })\n\n  function queryFeaturesItem(layer, query) {\n    return layer\n      .queryFeatures(query)\n      .then(results => {\n        //convert to json, extract k/v, then\n        return results.features.map(feature => {\n          const { attributes } = feature.toJSON()\n          const {\n            House_Num: houseNum,\n            Street: street,\n            FID: id,\n            SAF_Type: type,\n            EditDate: lastEdit\n          } = attributes\n          return {\n            houseNum: houseNum ? houseNum : '_', //default if null\n            street: street ? street : '_', //default if null\n            id,\n            type,\n            lastEdit,\n            feature,\n            files: []\n          }\n        })\n      })\n      .then(async features => {\n        if (features.length === 0) {\n          return features\n        }\n        //query for attachements\n        const objectIds = features.map(feature => feature.id)\n        const attachements = await layer.queryAttachments({\n          objectIds: objectIds\n        })\n        //bind to features\n        Object.keys(attachements).forEach(id => {\n          const feature = features.find(feature => feature.id.toString() === id)\n          feature.files = attachements[id].map(item => item.url)\n        })\n        return features\n      })\n      .catch(error => console.log(error.message))\n  }\n\n  function highlightAddress(event) {\n    if (addressLayer) {\n      view.whenLayerView(addressLayer).then(layerView => {\n        if (highlightSelect) {\n          highlightSelect.remove()\n        }\n        highlightSelect = layerView.highlight(event.detail.feature)\n      })\n    }\n  }\n</script>\n\n<div class=\"container\">\n  <h3 class=\"is-3\">Lot Information</h3>\n  <p class=\"is-6 subtitle\">Boro-Block-Lot: {bbl}</p>\n  <ul>\n    <li>\n      <a\n        href=\"{`https://zola.planning.nyc.gov/l/lot/${bbl_break.boro}/${bbl_break.block}/${bbl_break.lot}`}\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        >View ZOLA</a\n      >\n    </li>\n    <li>\n      <a\n        href=\"{`http://a836-acris.nyc.gov/bblsearch/bblsearch.asp?borough=${bbl_break.boro}&block=${bbl_break.block}&lot=${bbl_break.lot}`}\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        >View ACRIS</a\n      >\n    </li>\n    <li>\n      <a\n        href=\"{`http://a810-bisweb.nyc.gov/bisweb/PropertyBrowseByBBLServlet?allborough=${bbl_break.boro}&allblock=${bbl_break.block}&alllot=${bbl_break.lot}&go5=+GO+&requestid=0`}\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        >View DOB</a\n      >\n    </li>\n  </ul>\n\n  {#if lotDetails.type}\n  <p><strong>Type: </strong>{lotDetails.type}</p>\n  {/if} {#if lotDetails.comments}\n  <p><strong>Comments: </strong>{lotDetails.comments}</p>\n  {/if}\n\n  <p><strong>Files</strong></p>\n  {#if lotDetails.files.length}\n  <ul>\n    {#each lotDetails.files as lot}\n    <li>\n      <a href=\"{lot.url}\" target=\"_blank\" rel=\"noopener noreferrer\"\n        >{lot.name}</a\n      >\n    </li>\n    {/each}\n  </ul>\n\n  {:else}\n  <p>No files attached to this lot</p>\n  {/if}\n\n  <hr />\n\n  {#if addresses} {#if addresses.length}\n  <p><strong>There are {addresses.length} addresses for this lot.</strong></p>\n\n  <AddressTable {addresses} on:message=\"{highlightAddress}\"></AddressTable>\n  {:else}\n  <p>\n    <strong\n      >No addresses mapped in the database, please view the files above.</strong\n    >\n  </p>\n  {/if} {:else}\n  <p>Loading...</p>\n  {/if}\n\n  <br />\n\n  <div id=\"map\" bind:this=\"{container}\"></div>\n  <hr />\n  <a href=\"/\" use:link>Go back to main page</a>\n</div>\n\n<style>\n  :global(.esri-legend) {\n    max-height: 150px !important;\n  }\n\n  #map {\n    max-width: 1000px;\n    height: 500px;\n  }\n</style>\n",
    "<script></script>\n\n<main>\n  <div class=\"notification\">\n    <div class=\"content\">\n      <h3>404 - page not found</h3>\n      <p>Please keep calm and return to the previous page</p>\n    </div>\n  </div>\n</main>\n\n<style>\n  main {\n    padding: 1.5rem;\n    position: relative;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAoBE,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,iBAAiB,CAAC,CAAC,UAAU,AAC5C,CAAC,AACO,wCAAwC,AAAE,CAAC,AACjD,WAAW,CAAE,cAAc,CAAC,CAAC,KAAK,AACpC,CAAC,AACD,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,IAAI,CAAE,CAAC,CAAC,CAAC,CACT,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,GAAG,CAAC,CAAC,CAAC,KAAK,CACjB,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,OAAO,GAAG,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjC,sBAAQ,CACR,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,IAAI,AACd,CAAC,AACH,CAAC;ACmFD,IAAI,cAAC,CAAC,AACJ,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,GAAG,AACpB,CAAC,AASD,EAAE,cAAC,CAAC,AACF,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACtB,MAAM,CAAE,GAAG,CAAC,UAAU,AACxB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,WAAW,CAAE,GAAG,AAClB,CAAC;ACtFD,eAAe,eAAC,CAAC,AACf,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,AACjB,CAAC;AC8CD,IAAI,cAAC,CAAC,AACJ,aAAa,CAAE,IAAI,AACrB,CAAC;ACLO,YAAY,AAAE,CAAC,AACrB,UAAU,CAAE,KAAK,CAAC,UAAU,AAC9B,CAAC,AAEO,qBAAqB,AAAE,CAAC,AAC9B,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;AC5FD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CAAC,MAAM,CACpB,aAAa,CAAE,IAAI,AACrB,CAAC;ACwSO,YAAY,AAAE,CAAC,AACrB,UAAU,CAAE,KAAK,CAAC,UAAU,AAC9B,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,KAAK,AACf,CAAC;AC1UD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,MAAM,CACf,QAAQ,CAAE,QAAQ,AACpB,CAAC"
}